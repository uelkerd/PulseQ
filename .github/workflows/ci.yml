name: PulseQ

permissions:
  contents: write

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to run tests against"
        required: true
        default: "staging"
        type: choice
        options:
          - staging
          - production

jobs:
  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black bandit
          pip install -e .
      - name: Lint with flake8
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      - name: Run Black formatting check
        run: |
          black --check . || echo "Black formatting issues found but continuing workflow"
      - name: Security scan with Bandit
        run: |
          bandit -r src/ -ll

  unit-tests:
    runs-on: ubuntu-latest
    needs: linting
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-benchmark
          pip install -e .
      - name: Test with pytest
        run: |
          pytest tests/unit/ -v --cov=src --cov-report=xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml

  integration-tests:
    needs: unit-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov docker-compose
          pip install -e .
      - name: Start test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v
      - name: Stop test environment
        run: |
          docker-compose -f docker-compose.test.yml down

  performance-tests:
    needs: integration-tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest-benchmark locust
          pip install -e .
      - name: Run performance benchmarks
        run: |
          pytest tests/performance/ -v
      - name: Run load tests
        run: |
          locust -f tests/performance/load_tests.py --headless -u 100 -r 10 -t 1m

  reporting:
    needs: [performance-tests]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - uses: actions/checkout@v4
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      - name: Set up Allure
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          allure_report: allure-report
          allure_history: allure-history
          keep_reports: 20
      - name: Publish Allure Report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report/
